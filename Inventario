import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3

# Configuración de la base de datos
conn = sqlite3.connect('inventario.db')
c = conn.cursor()

# Crear tablas
c.execute('''CREATE TABLE IF NOT EXISTS clientes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nombre TEXT NOT NULL,
                direccion TEXT NOT NULL)''')

c.execute('''CREATE TABLE IF NOT EXISTS productos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                nombre TEXT NOT NULL,
                cantidad INTEGER NOT NULL,
                precio REAL NOT NULL)''')

c.execute('''CREATE TABLE IF NOT EXISTS pedidos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                cliente_id INTEGER NOT NULL,
                producto_id INTEGER NOT NULL,
                cantidad INTEGER NOT NULL,
                FOREIGN KEY (cliente_id) REFERENCES clientes(id),
                FOREIGN KEY (producto_id) REFERENCES productos(id))''')

conn.commit()

# Funciones para manejar la base de datos
def agregar_cliente(nombre, direccion):
    c.execute("INSERT INTO clientes (nombre, direccion) VALUES (?, ?)", (nombre, direccion))
    conn.commit()

def eliminar_cliente(cliente_id):
    c.execute("DELETE FROM clientes WHERE id=?", (cliente_id,))
    conn.commit()

def obtener_clientes():
    c.execute("SELECT * FROM clientes")
    return c.fetchall()

def agregar_producto(nombre, cantidad, precio):
    c.execute("INSERT INTO productos (nombre, cantidad, precio) VALUES (?, ?, ?)", (nombre, cantidad, precio))
    conn.commit()

def eliminar_producto(producto_id):
    c.execute("DELETE FROM productos WHERE id=?", (producto_id,))
    conn.commit()

def modificar_producto(producto_id, nombre, cantidad, precio):
    c.execute("UPDATE productos SET nombre=?, cantidad=?, precio=? WHERE id=?", (nombre, cantidad, precio, producto_id))
    conn.commit()

def obtener_productos():
    c.execute("SELECT * FROM productos")
    return c.fetchall()

def agregar_pedido(cliente_id, producto_id, cantidad):
    c.execute("INSERT INTO pedidos (cliente_id, producto_id, cantidad) VALUES (?, ?, ?)", (cliente_id, producto_id, cantidad))
    conn.commit()

def eliminar_pedido(pedido_id):
    c.execute("DELETE FROM pedidos WHERE id=?", (pedido_id,))
    conn.commit()

def obtener_pedidos():
    c.execute("SELECT p.id, pr.nombre, p.cantidad, c.nombre FROM pedidos p JOIN productos pr ON p.producto_id = pr.id JOIN clientes c ON p.cliente_id = c.id")
    return c.fetchall()

def obtener_pedidos_por_cliente(cliente_id):
    c.execute("SELECT pr.nombre, p.cantidad FROM pedidos p JOIN productos pr ON p.producto_id = pr.id WHERE p.cliente_id=?", (cliente_id,))
    return c.fetchall()

class InventarioApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Inventario")

        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(pady=10, expand=True)

        self.clientes_tab = ttk.Frame(self.notebook)
        self.productos_tab = ttk.Frame(self.notebook)
        self.pedidos_tab = ttk.Frame(self.notebook)

        self.notebook.add(self.clientes_tab, text="Clientes")
        self.notebook.add(self.productos_tab, text="Productos")
        self.notebook.add(self.pedidos_tab, text="Pedidos")

        self.crear_clientes_tab()
        self.crear_productos_tab()
        self.crear_pedidos_tab()

    def crear_clientes_tab(self):
        tk.Label(self.clientes_tab, text="Nombre").grid(row=0, column=0, padx=10, pady=10)
        self.cliente_nombre = tk.Entry(self.clientes_tab)
        self.cliente_nombre.grid(row=0, column=1, padx=10, pady=10)

        tk.Label(self.clientes_tab, text="Dirección").grid(row=1, column=0, padx=10, pady=10)
        self.cliente_direccion = tk.Entry(self.clientes_tab)
        self.cliente_direccion.grid(row=1, column=1, padx=10, pady=10)

        tk.Button(self.clientes_tab, text="Agregar Cliente", command=self.agregar_cliente).grid(row=2, column=0, columnspan=2, padx=10, pady=10)

        self.clientes_tree = ttk.Treeview(self.clientes_tab, columns=("ID", "Nombre", "Dirección"), show='headings')
        self.clientes_tree.heading("ID", text="ID")
        self.clientes_tree.heading("Nombre", text="Nombre")
        self.clientes_tree.heading("Dirección", text="Dirección")
        self.clientes_tree.grid(row=3, column=0, columnspan=2, padx=10, pady=10)

        tk.Button(self.clientes_tab, text="Eliminar Cliente", command=self.eliminar_cliente_tab).grid(row=4, column=0, columnspan=2, padx=10, pady=10)

        tk.Button(self.clientes_tab, text="Mostrar Productos del Cliente", command=self.abrir_ventana_productos_cliente).grid(row=5, column=0, columnspan=2, padx=10, pady=10)

        self.actualizar_clientes_tree()

    def crear_productos_tab(self):
        tk.Label(self.productos_tab, text="Nombre").grid(row=0, column=0, padx=10, pady=10)
        self.producto_nombre = tk.Entry(self.productos_tab)
        self.producto_nombre.grid(row=0, column=1, padx=10, pady=10)

        tk.Label(self.productos_tab, text="Cantidad").grid(row=1, column=0, padx=10, pady=10)
        self.producto_cantidad = tk.Entry(self.productos_tab)
        self.producto_cantidad.grid(row=1, column=1, padx=10, pady=10)

        tk.Label(self.productos_tab, text="Precio").grid(row=2, column=0, padx=10, pady=10)
        self.producto_precio = tk.Entry(self.productos_tab)
        self.producto_precio.grid(row=2, column=1, padx=10, pady=10)

        tk.Button(self.productos_tab, text="Agregar Producto", command=self.agregar_producto).grid(row=3, column=0, columnspan=2, padx=10, pady=10)

        self.productos_tree = ttk.Treeview(self.productos_tab, columns=("ID", "Nombre", "Cantidad", "Precio"), show='headings')
        self.productos_tree.heading("ID", text="ID")
        self.productos_tree.heading("Nombre", text="Nombre")
        self.productos_tree.heading("Cantidad", text="Cantidad")
        self.productos_tree.heading("Precio", text="Precio")
        self.productos_tree.grid(row=4, column=0, columnspan=2, padx=10, pady=10)

        tk.Button(self.productos_tab, text="Eliminar Producto", command=self.eliminar_producto_tab).grid(row=5, column=0, columnspan=2, padx=10, pady=10)

        self.actualizar_productos_tree()

    def crear_pedidos_tab(self):
        tk.Label(self.pedidos_tab, text="Cliente ID").grid(row=0, column=0, padx=10, pady=10)
        self.pedido_cliente_id = tk.Entry(self.pedidos_tab)
        self.pedido_cliente_id.grid(row=0, column=1, padx=10, pady=10)

        tk.Label(self.pedidos_tab, text="Producto ID").grid(row=1, column=0, padx=10, pady=10)
        self.pedido_producto_id = tk.Entry(self.pedidos_tab)
        self.pedido_producto_id.grid(row=1, column=1, padx=10, pady=10)

        tk.Label(self.pedidos_tab, text="Cantidad").grid(row=2, column=0, padx=10, pady=10)
        self.pedido_cantidad = tk.Entry(self.pedidos_tab)
        self.pedido_cantidad.grid(row=2, column=1, padx=10, pady=10)

        tk.Button(self.pedidos_tab, text="Agregar Pedido", command=self.agregar_pedido).grid(row=3, column=0, columnspan=2, padx=10, pady=10)

        self.pedidos_tree = ttk.Treeview(self.pedidos_tab, columns=("ID", "Producto", "Cantidad", "Cliente"), show='headings')
        self.pedidos_tree.heading("ID", text="ID")
        self.pedidos_tree.heading("Producto", text="Producto")
        self.pedidos_tree.heading("Cantidad", text="Cantidad")
        self.pedidos_tree.heading("Cliente", text="Cliente")
        self.pedidos_tree.grid(row=4, column=0, columnspan=2, padx=10, pady=10)

        tk.Button(self.pedidos_tab, text="Eliminar Pedido", command=self.eliminar_pedido_tab).grid(row=5, column=0, columnspan=2, padx=10, pady=10)

        self.actualizar_pedidos_tree()

    def agregar_cliente(self):
        nombre = self.cliente_nombre.get()
        direccion = self.cliente_direccion.get()
        if nombre and direccion:
            agregar_cliente(nombre, direccion)
            self.actualizar_clientes_tree()
        else:
            messagebox.showwarning("Advertencia", "Por favor ingrese todos los datos del cliente")

    def eliminar_cliente_tab(self):
        selected_item = self.clientes_tree.selection()
        if selected_item:
            cliente_id = self.clientes_tree.item(selected_item, 'values')[0]
            eliminar_cliente(cliente_id)
            self.actualizar_clientes_tree()
        else:
            messagebox.showwarning("Advertencia", "Por favor seleccione un cliente para eliminar")

    def actualizar_clientes_tree(self):
        for row in self.clientes_tree.get_children():
            self.clientes_tree.delete(row)
        for row in obtener_clientes():
            self.clientes_tree.insert("", "end", values=row)

    def abrir_ventana_productos_cliente(self):
        selected_item = self.clientes_tree.selection()
        if selected_item:
            cliente_id = self.clientes_tree.item(selected_item, 'values')[0]
            productos_cliente = obtener_pedidos_por_cliente(cliente_id)
            
            new_window = tk.Toplevel(self.root)
            new_window.title("Productos del Cliente")
            
            productos_cliente_tree = ttk.Treeview(new_window, columns=("Producto", "Cantidad"), show='headings')
            productos_cliente_tree.heading("Producto", text="Producto")
            productos_cliente_tree.heading("Cantidad", text="Cantidad")
            productos_cliente_tree.pack(fill=tk.BOTH, expand=True)
            
            for producto, cantidad in productos_cliente:
                productos_cliente_tree.insert("", "end", values=(producto, cantidad))
        else:
            messagebox.showwarning("Advertencia", "Por favor seleccione un cliente")

    def agregar_producto(self):
        nombre = self.producto_nombre.get()
        cantidad = self.producto_cantidad.get()
        precio = self.producto_precio.get()
        if nombre and cantidad and precio:
            agregar_producto(nombre, cantidad, float(precio))
            self.actualizar_productos_tree()
        else:
            messagebox.showwarning("Advertencia", "Por favor ingrese todos los datos del producto")

    def eliminar_producto_tab(self):
        selected_item = self.productos_tree.selection()
        if selected_item:
            producto_id = self.productos_tree.item(selected_item, 'values')[0]
            eliminar_producto(producto_id)
            self.actualizar_productos_tree()
        else:
            messagebox.showwarning("Advertencia", "Por favor seleccione un producto para eliminar")

    def actualizar_productos_tree(self):
        for row in self.productos_tree.get_children():
            self.productos_tree.delete(row)
        for row in obtener_productos():
            self.productos_tree.insert("", "end", values=row)

    def agregar_pedido(self):
        cliente_id = self.pedido_cliente_id.get()
        producto_id = self.pedido_producto_id.get()
        cantidad = self.pedido_cantidad.get()
        if cliente_id and producto_id and cantidad:
            agregar_pedido(cliente_id, producto_id, cantidad)
            self.actualizar_pedidos_tree()
        else:
            messagebox.showwarning("Advertencia", "Por favor ingrese todos los datos del pedido")

    def eliminar_pedido_tab(self):
        selected_item = self.pedidos_tree.selection()
        if selected_item:
            pedido_id = self.pedidos_tree.item(selected_item, 'values')[0]
            eliminar_pedido(pedido_id)
            self.actualizar_pedidos_tree()
        else:
            messagebox.showwarning("Advertencia", "Por favor seleccione un pedido para eliminar")

    def actualizar_pedidos_tree(self):
        for row in self.pedidos_tree.get_children():
            self.pedidos_tree.delete(row)
        for row in obtener_pedidos():
            self.pedidos_tree.insert("", "end", values=row)

if __name__ == "__main__":
    root = tk.Tk()
    app = InventarioApp(root)
    root.mainloop()
